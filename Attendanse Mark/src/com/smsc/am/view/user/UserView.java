/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.smsc.am.view.user;

import com.smsc.am.controller.UserController;
import com.smsc.am.model.Emplyee;
import com.smsc.am.model.LeaveType;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SASANGA
 */
public class UserView extends javax.swing.JFrame {

    private int selectedRow;
    private final UserController userController;
    private ArrayList<Emplyee> emplyees;
    private Emplyee selectedEmployee;
    private String employeeName;
    private ArrayList<Emplyee> searchUsersByName;

    /**
     * Creates new form UserView
     */
    public UserView() {
        this.selectedRow = -1;
        initComponents();
        userController = new UserController();
        setLocationRelativeTo(null);
        loadUsersByType(2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jXImagePanel1 = new org.jdesktop.swingx.JXImagePanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUsers = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        btnDeleteUser = new javax.swing.JButton();
        btnEditUser = new javax.swing.JButton();
        radiEmployee = new javax.swing.JRadioButton();
        radiUser = new javax.swing.JRadioButton();
        radiAll = new javax.swing.JRadioButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jXImagePanel1.setBackground(new java.awt.Color(255, 255, 255));

        tblUsers.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tblUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Email", "Name", "Phone No", "Acount Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblUsers.setRowHeight(25);
        tblUsers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblUsersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblUsers);

        txtSearch.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSearchFocusLost(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        btnDeleteUser.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnDeleteUser.setText("Delete");
        btnDeleteUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteUserActionPerformed(evt);
            }
        });

        btnEditUser.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnEditUser.setText("Edit");
        btnEditUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditUserActionPerformed(evt);
            }
        });

        radiEmployee.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(radiEmployee);
        radiEmployee.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        radiEmployee.setSelected(true);
        radiEmployee.setText("Employee");
        radiEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radiEmployeeActionPerformed(evt);
            }
        });

        radiUser.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(radiUser);
        radiUser.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        radiUser.setText("System Users");
        radiUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radiUserActionPerformed(evt);
            }
        });

        radiAll.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(radiAll);
        radiAll.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        radiAll.setText("All");
        radiAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radiAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jXImagePanel1Layout = new javax.swing.GroupLayout(jXImagePanel1);
        jXImagePanel1.setLayout(jXImagePanel1Layout);
        jXImagePanel1Layout.setHorizontalGroup(
            jXImagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXImagePanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jXImagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jXImagePanel1Layout.createSequentialGroup()
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(radiEmployee)
                        .addGap(18, 18, 18)
                        .addComponent(radiUser)
                        .addGap(18, 18, 18)
                        .addComponent(radiAll)
                        .addGap(0, 23, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jXImagePanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnEditUser)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDeleteUser)))
                .addContainerGap())
        );
        jXImagePanel1Layout.setVerticalGroup(
            jXImagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXImagePanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jXImagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radiEmployee)
                    .addComponent(radiUser)
                    .addComponent(radiAll))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jXImagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeleteUser)
                    .addComponent(btnEditUser))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("Manage");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("New");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jXImagePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jXImagePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        NewUser newUser = new NewUser();
        newUser.setUserView(this);
        newUser.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void radiEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radiEmployeeActionPerformed
        loadUsersByType(2);
    }//GEN-LAST:event_radiEmployeeActionPerformed

    private void radiUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radiUserActionPerformed
        loadUsersByType(1);
    }//GEN-LAST:event_radiUserActionPerformed

    private void radiAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radiAllActionPerformed
        loadUsers();
    }//GEN-LAST:event_radiAllActionPerformed

    private void btnEditUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditUserActionPerformed
        if (selectedRow > -1) {
            showUpdatePopup();
        } else {
            JOptionPane.showMessageDialog(this, "Please Select a Row !!!!!");
        }
    }//GEN-LAST:event_btnEditUserActionPerformed

    private void tblUsersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblUsersMouseClicked
        selectedRow = tblUsers.getSelectedRow();
        getSelectedUser();
    }//GEN-LAST:event_tblUsersMouseClicked

    private void txtSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusLost
        if (txtSearch.getText().equals("")) {
            txtSearch.setText("Enter name to search");
        }
    }//GEN-LAST:event_txtSearchFocusLost

    private void txtSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusGained
        if (txtSearch.getText().equals("Enter name to search")) {
            txtSearch.setText("");
        }
    }//GEN-LAST:event_txtSearchFocusGained

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed

    }//GEN-LAST:event_txtSearchKeyPressed

    private void btnDeleteUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteUserActionPerformed
        if (selectedRow > -1) {
            deleteUser();
        } else {
            JOptionPane.showMessageDialog(this, "Please Select a Row !!!!!");
        }
    }//GEN-LAST:event_btnDeleteUserActionPerformed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
//        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
//            
//        }
        searchUsers();
    }//GEN-LAST:event_txtSearchKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteUser;
    private javax.swing.JButton btnEditUser;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXImagePanel jXImagePanel1;
    private javax.swing.JRadioButton radiAll;
    private javax.swing.JRadioButton radiEmployee;
    private javax.swing.JRadioButton radiUser;
    private javax.swing.JTable tblUsers;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    private void loadUsersByType(int type) {
        try {
            emplyees = userController.listUsersByType(type);
            DefaultTableModel dtm = (DefaultTableModel) tblUsers.getModel();
            dtm.setRowCount(0);
            this.selectedRow = -1;
            this.selectedEmployee = null;
            String accountType;
            accountType = null;
            for (Emplyee emplyee : emplyees) {
                if (emplyee.getType() == 1) {
                    accountType = "System User";
                } else {
                    accountType = "Employee";
                }
                Object[] row = {emplyee.getEmail(), emplyee.getName(), emplyee.getPhoneNumber(), accountType};
                dtm.addRow(row);
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(UserView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Server error orcked in list users", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadUsers() {
        try {
            emplyees = userController.listUsers();
            DefaultTableModel dtm = (DefaultTableModel) tblUsers.getModel();
            dtm.setRowCount(0);
            this.selectedRow = -1;
            this.selectedEmployee = null;
            String accountType = null;
            for (Emplyee emplyee : emplyees) {
                if (emplyee.getType() == 1) {
                    accountType = "System User";
                } else {
                    accountType = "Employee";
                }
                Object[] row = {emplyee.getEmail(), emplyee.getName(), emplyee.getPhoneNumber(), accountType};
                dtm.addRow(row);
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(UserView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Server error orcked in list users", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void showUpdatePopup() {
        UserUpdate userUpdate = new UserUpdate(this, true);
        userUpdate.setEmployeeForUpdate(selectedEmployee);
        userUpdate.setUserView(this);
        userUpdate.setVisible(true);
    }

    public void UpdateTable() {
        if (radiEmployee.isSelected()) {
            loadUsersByType(2);
        } else if (radiUser.isSelected()) {
            loadUsersByType(1);
        } else {
            loadUsers();
        }
    }

    private void getSelectedUser() {
        String deEmail = tblUsers.getValueAt(selectedRow, 0).toString();
        for (Emplyee emplyee : emplyees) {
            if (emplyee.getEmail().equals(deEmail)) {
                selectedEmployee = emplyee;
            }
        }
    }

    private void searchUsers() {
        if (!txtSearch.getText().equals("") && !txtSearch.getText().equals("Enter name to search")) {
            try {
                searchUsersByName = userController.searchUsersByName(txtSearch.getText());
                if (searchUsersByName != null) {
                    DefaultTableModel dtm = (DefaultTableModel) tblUsers.getModel();
                    dtm.setRowCount(0);
                    this.selectedRow = -1;
                    this.selectedEmployee = null;
                    String accountType;
                    accountType = null;
                    for (Emplyee emplyee : searchUsersByName) {
                        if (emplyee.getType() == 1) {
                            accountType = "System User";
                        } else {
                            accountType = "Employee";
                        }
                        Object[] row = {emplyee.getEmail(), emplyee.getName(), emplyee.getPhoneNumber(), accountType};
                        dtm.addRow(row);
                    }
                }
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(UserView.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Server error orcked in list users", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            if (radiEmployee.isSelected()) {
                loadUsersByType(2);
            } else if (radiUser.isSelected()) {
                loadUsersByType(1);
            } else {
                loadUsers();
            }
        }
    }

    private void deleteUser() {
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure?\n You want to remove this user.");
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                boolean isDeleteUser = userController.deleteUser(selectedEmployee.getId());
                if (isDeleteUser) {
                    JOptionPane.showMessageDialog(this, "User successfully removed!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    if (radiEmployee.isSelected()) {
                        loadUsersByType(2);
                    } else if (radiUser.isSelected()) {
                        loadUsersByType(1);
                    } else {
                        loadUsers();
                    }
                }
            } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(this, "Server error orcked in delete users", "Error", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(UserView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

}
